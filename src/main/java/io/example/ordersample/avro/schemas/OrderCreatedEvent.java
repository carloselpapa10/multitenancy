/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package io.example.ordersample.avro.schemas;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class OrderCreatedEvent extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 8368578017637370160L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"OrderCreatedEvent\",\"namespace\":\"io.example.ordersample.avro.schemas\",\"fields\":[{\"name\":\"id\",\"type\":\"string\",\"doc\":\"Id of Order\"},{\"name\":\"description\",\"type\":\"string\",\"doc\":\"Description of Order\"},{\"name\":\"customerId\",\"type\":\"string\",\"doc\":\"Id of customer\"},{\"name\":\"newProperty\",\"type\":\"string\",\"doc\":\"New property\"}],\"version\":\"2\"}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<OrderCreatedEvent> ENCODER =
      new BinaryMessageEncoder<OrderCreatedEvent>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<OrderCreatedEvent> DECODER =
      new BinaryMessageDecoder<OrderCreatedEvent>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<OrderCreatedEvent> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<OrderCreatedEvent> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<OrderCreatedEvent>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this OrderCreatedEvent to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a OrderCreatedEvent from a ByteBuffer. */
  public static OrderCreatedEvent fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  /** Id of Order */
  @Deprecated public java.lang.CharSequence id;
  /** Description of Order */
  @Deprecated public java.lang.CharSequence description;
  /** Id of customer */
  @Deprecated public java.lang.CharSequence customerId;
  /** New property */
  @Deprecated public java.lang.CharSequence newProperty;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public OrderCreatedEvent() {}

  /**
   * All-args constructor.
   * @param id Id of Order
   * @param description Description of Order
   * @param customerId Id of customer
   * @param newProperty New property
   */
  public OrderCreatedEvent(java.lang.CharSequence id, java.lang.CharSequence description, java.lang.CharSequence customerId, java.lang.CharSequence newProperty) {
    this.id = id;
    this.description = description;
    this.customerId = customerId;
    this.newProperty = newProperty;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return id;
    case 1: return description;
    case 2: return customerId;
    case 3: return newProperty;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: id = (java.lang.CharSequence)value$; break;
    case 1: description = (java.lang.CharSequence)value$; break;
    case 2: customerId = (java.lang.CharSequence)value$; break;
    case 3: newProperty = (java.lang.CharSequence)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'id' field.
   * @return Id of Order
   */
  public java.lang.CharSequence getId() {
    return id;
  }

  /**
   * Sets the value of the 'id' field.
   * Id of Order
   * @param value the value to set.
   */
  public void setId(java.lang.CharSequence value) {
    this.id = value;
  }

  /**
   * Gets the value of the 'description' field.
   * @return Description of Order
   */
  public java.lang.CharSequence getDescription() {
    return description;
  }

  /**
   * Sets the value of the 'description' field.
   * Description of Order
   * @param value the value to set.
   */
  public void setDescription(java.lang.CharSequence value) {
    this.description = value;
  }

  /**
   * Gets the value of the 'customerId' field.
   * @return Id of customer
   */
  public java.lang.CharSequence getCustomerId() {
    return customerId;
  }

  /**
   * Sets the value of the 'customerId' field.
   * Id of customer
   * @param value the value to set.
   */
  public void setCustomerId(java.lang.CharSequence value) {
    this.customerId = value;
  }

  /**
   * Gets the value of the 'newProperty' field.
   * @return New property
   */
  public java.lang.CharSequence getNewProperty() {
    return newProperty;
  }

  /**
   * Sets the value of the 'newProperty' field.
   * New property
   * @param value the value to set.
   */
  public void setNewProperty(java.lang.CharSequence value) {
    this.newProperty = value;
  }

  /**
   * Creates a new OrderCreatedEvent RecordBuilder.
   * @return A new OrderCreatedEvent RecordBuilder
   */
  public static io.example.ordersample.avro.schemas.OrderCreatedEvent.Builder newBuilder() {
    return new io.example.ordersample.avro.schemas.OrderCreatedEvent.Builder();
  }

  /**
   * Creates a new OrderCreatedEvent RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new OrderCreatedEvent RecordBuilder
   */
  public static io.example.ordersample.avro.schemas.OrderCreatedEvent.Builder newBuilder(io.example.ordersample.avro.schemas.OrderCreatedEvent.Builder other) {
    return new io.example.ordersample.avro.schemas.OrderCreatedEvent.Builder(other);
  }

  /**
   * Creates a new OrderCreatedEvent RecordBuilder by copying an existing OrderCreatedEvent instance.
   * @param other The existing instance to copy.
   * @return A new OrderCreatedEvent RecordBuilder
   */
  public static io.example.ordersample.avro.schemas.OrderCreatedEvent.Builder newBuilder(io.example.ordersample.avro.schemas.OrderCreatedEvent other) {
    return new io.example.ordersample.avro.schemas.OrderCreatedEvent.Builder(other);
  }

  /**
   * RecordBuilder for OrderCreatedEvent instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<OrderCreatedEvent>
    implements org.apache.avro.data.RecordBuilder<OrderCreatedEvent> {

    /** Id of Order */
    private java.lang.CharSequence id;
    /** Description of Order */
    private java.lang.CharSequence description;
    /** Id of customer */
    private java.lang.CharSequence customerId;
    /** New property */
    private java.lang.CharSequence newProperty;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(io.example.ordersample.avro.schemas.OrderCreatedEvent.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.description)) {
        this.description = data().deepCopy(fields()[1].schema(), other.description);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.customerId)) {
        this.customerId = data().deepCopy(fields()[2].schema(), other.customerId);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.newProperty)) {
        this.newProperty = data().deepCopy(fields()[3].schema(), other.newProperty);
        fieldSetFlags()[3] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing OrderCreatedEvent instance
     * @param other The existing instance to copy.
     */
    private Builder(io.example.ordersample.avro.schemas.OrderCreatedEvent other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.description)) {
        this.description = data().deepCopy(fields()[1].schema(), other.description);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.customerId)) {
        this.customerId = data().deepCopy(fields()[2].schema(), other.customerId);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.newProperty)) {
        this.newProperty = data().deepCopy(fields()[3].schema(), other.newProperty);
        fieldSetFlags()[3] = true;
      }
    }

    /**
      * Gets the value of the 'id' field.
      * Id of Order
      * @return The value.
      */
    public java.lang.CharSequence getId() {
      return id;
    }

    /**
      * Sets the value of the 'id' field.
      * Id of Order
      * @param value The value of 'id'.
      * @return This builder.
      */
    public io.example.ordersample.avro.schemas.OrderCreatedEvent.Builder setId(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.id = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'id' field has been set.
      * Id of Order
      * @return True if the 'id' field has been set, false otherwise.
      */
    public boolean hasId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'id' field.
      * Id of Order
      * @return This builder.
      */
    public io.example.ordersample.avro.schemas.OrderCreatedEvent.Builder clearId() {
      id = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'description' field.
      * Description of Order
      * @return The value.
      */
    public java.lang.CharSequence getDescription() {
      return description;
    }

    /**
      * Sets the value of the 'description' field.
      * Description of Order
      * @param value The value of 'description'.
      * @return This builder.
      */
    public io.example.ordersample.avro.schemas.OrderCreatedEvent.Builder setDescription(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.description = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'description' field has been set.
      * Description of Order
      * @return True if the 'description' field has been set, false otherwise.
      */
    public boolean hasDescription() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'description' field.
      * Description of Order
      * @return This builder.
      */
    public io.example.ordersample.avro.schemas.OrderCreatedEvent.Builder clearDescription() {
      description = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'customerId' field.
      * Id of customer
      * @return The value.
      */
    public java.lang.CharSequence getCustomerId() {
      return customerId;
    }

    /**
      * Sets the value of the 'customerId' field.
      * Id of customer
      * @param value The value of 'customerId'.
      * @return This builder.
      */
    public io.example.ordersample.avro.schemas.OrderCreatedEvent.Builder setCustomerId(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.customerId = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'customerId' field has been set.
      * Id of customer
      * @return True if the 'customerId' field has been set, false otherwise.
      */
    public boolean hasCustomerId() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'customerId' field.
      * Id of customer
      * @return This builder.
      */
    public io.example.ordersample.avro.schemas.OrderCreatedEvent.Builder clearCustomerId() {
      customerId = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'newProperty' field.
      * New property
      * @return The value.
      */
    public java.lang.CharSequence getNewProperty() {
      return newProperty;
    }

    /**
      * Sets the value of the 'newProperty' field.
      * New property
      * @param value The value of 'newProperty'.
      * @return This builder.
      */
    public io.example.ordersample.avro.schemas.OrderCreatedEvent.Builder setNewProperty(java.lang.CharSequence value) {
      validate(fields()[3], value);
      this.newProperty = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'newProperty' field has been set.
      * New property
      * @return True if the 'newProperty' field has been set, false otherwise.
      */
    public boolean hasNewProperty() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'newProperty' field.
      * New property
      * @return This builder.
      */
    public io.example.ordersample.avro.schemas.OrderCreatedEvent.Builder clearNewProperty() {
      newProperty = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public OrderCreatedEvent build() {
      try {
        OrderCreatedEvent record = new OrderCreatedEvent();
        record.id = fieldSetFlags()[0] ? this.id : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.description = fieldSetFlags()[1] ? this.description : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.customerId = fieldSetFlags()[2] ? this.customerId : (java.lang.CharSequence) defaultValue(fields()[2]);
        record.newProperty = fieldSetFlags()[3] ? this.newProperty : (java.lang.CharSequence) defaultValue(fields()[3]);
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<OrderCreatedEvent>
    WRITER$ = (org.apache.avro.io.DatumWriter<OrderCreatedEvent>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<OrderCreatedEvent>
    READER$ = (org.apache.avro.io.DatumReader<OrderCreatedEvent>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
